% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/r6.r
\name{createR6Class}
\alias{createR6Class}
\title{Define R6 classes on the fly}
\usage{
createR6Class(input, name = ".DerivedInternal", lazy = FALSE)
}
\arguments{
\item{input}{\code{\link{list}}.
Input for class fields. If elements with names \emph{public},
\emph{private} and \emph{active} are found, then the respective values
will be used as respective arguments value in the call to
\code{\link[R6]{R6Class}}. Otherwise the list will be mapped to
public fields (see examples).}

\item{name}{\code{\link{character}}.
Class name.}

\item{lazy}{\code{\link{logical}}.
\code{TRUE}: evaluate expression and thus return object generator;
\code{FALSE}: return expression that will generate the object generator.}
}
\description{
Creates R6 class generator objects on the fly.
}
\examples{
##------------------------------------------------------------------------------
## Default input //
##------------------------------------------------------------------------------

## This is ideal for rapid prototyping. All list elements are mapped to 
## publicly available fields.

inst <- createR6Class(input = list(x = 1, y = 2))
inst

##------------------------------------------------------------------------------
## Special input format //
##------------------------------------------------------------------------------

## For more fine control over the class structure.

input <- list(
  public = list(x = 10, foo = function() private$bar()),
  private = list(bar = function() "Hello World!"),
  active = list(
    x2 = function(value) {
      if (missing(value)) return(self$x * 2) else self$x <- value/2
    }
  )
)

## To see what's actually going on:
(inst <- createR6Class(input))
(inst <- inst$new())

inst$x
inst$foo
inst$foo()
inst$x2
inst$x2 <- 100
inst$x

##------------------------------------------------------------------------------
## Return expression //
##------------------------------------------------------------------------------

## Useful for lazy evaluation
(inst <- createR6Class(input, lazy = TRUE))
(inst <- eval(inst))
(inst <- inst$new())

##------------------------------------------------------------------------------
## Explicit name //
##------------------------------------------------------------------------------

createR6Class(input, name = "TestClass")

##------------------------------------------------------------------------------
## Empty //
##------------------------------------------------------------------------------

createR6Class(lazy = TRUE)
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/rappster/classr}
}
\seealso{
\code{\link[classr]{createR6Instance}}
}

