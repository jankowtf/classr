% Generated by roxygen2 (4.0.1): do not edit by hand
\name{ensureClassRegistration}
\alias{ensureClassRegistration}
\title{Ensure Class Registration}
\usage{
ensureClassRegistration(cl, strict = FALSE, ...)
}
\arguments{
\item{cl}{\strong{Signature argument}.
Object containing class information.
This usually corresponds to the name of a class.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: error if \code{cl} is already a class
(checked by \code{isClass});
\code{FALSE}: if class already exists it is not reset.}

\item{...}{Further arguments passed to subsequent functions/methods.
In particular:
\code{\link[methods]{setOldClass}}}
}
\description{
Ensures that classes are registrated in a sense that they are recognized
by \code{\link[methods]{isClass}}.
}
\details{
Esentially, this functions simply calls \code{\link[methods]{setOldClass}}
in order to register the classes. A call to this method might make sense
inside \code{\link[base]{.onLoad}} and \code{\link[base]{.onAttach}} of
your packages.
}
\examples{
\dontrun{

## NOTE //
## Keeping the default for 'where'  that is used by 'setOldClass',
## i.e. simply *not* providing a value in the call to 'ensureClassRegistration',
## only works as long as your package has not been fully loaded yet
ensureClassRegistration(cl = "TestClass")
isClass("TestClass")
ensureClassRegistration(cl = "TestClass")
try(ensureClassRegistration(cl = "TestClass", strict = TRUE))
ensureClassRegistration(cl = c("TestClass1", "TestClass2"))
isClass("TestClass1")
isClass("TestClass2")

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/classr}
}
\seealso{
\code{
  	\link[classr]{ensureClassRegistration-missing-method}
}
}

